#!/usr/bin/env node
'use strict'
const cac = require('cac')
const isSemver = require('is-semver')
const update = require('update-notifier')
const table = require('text-table')
const publish = require('./lib/publish')
const config = require('./lib/config')
require('colorful').toxic()

const cli = cac(`
  ${`Usage:`.bold}

  Commands:
    get [key]:          Get one or all config
    set <key> [value]:  Set a property in config to a given value, set to be null if no value shown

  Options:
    --next:             Short-hand for publishing with a tag, equal to --tag next
    --tag:              The tag of the publish, used when running \`npm publish\`
    -m/--message:       Commit message when running \`npm version\`
    -t/--test:          Custom npm script for testing
    --skip-test:        Skip test
    -p/--push:          Push to remote git server only
    -v--version:        Output version number
    -h/--help:          Output help infomation
`, {
  alias: {
    m: 'message',
    t: 'test',
    p: 'push'
  }
})

update({pkg: cli.pkg}).notify()

cli.command('get', function () {
  const all = config.all
  const key = this.input[1]
  if (key) {
    if (!all[key]) {
      return console.log(`Cannot find property ${key.underline}.`.red)
    }
    return console.log(all[key])
  }
  console.log(table(Object.keys(all).map(key => {
    return [
      key,
      all[key].green
    ]
  })))
})

cli.command('set', function () {
  const key = this.input[1]
  const value = this.input[2]
  if (!key) {
    return console.log('No property provided.'.red)
  }
  if (value) {
    config.set(key, value)
  } else {
    config.del(key)
  }
})

cli.command('*', function* () {
  // for all semantic version
  const allTypes = [
    'patch',
    'minor',
    'major',
    'premajor',
    'preminor',
    'prepatch',
    'prerelease',
    'from-git'
  ]
  const type = this.input[0] || 'patch'

  if (isSemver(type) || allTypes.indexOf(type) > -1) {
    yield publish(type, this)
  } else {
    console.log('> Invalid version.'.red)
    process.exit(1)
  }
})

cli.parse()
